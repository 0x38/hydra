(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{140:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));var o=t(2),r=t(7),i=(t(0),t(168)),a={id:"__config_groups",title:"Config Groups"},c={unversionedId:"tutorials/structured_config/__config_groups",id:"tutorials/structured_config/__config_groups",isDocsHomePage:!1,title:"Config Groups",description:"Structured Configs support config groups which are similar to file-based config groups.",source:"@site/docs/tutorials/structured_config/ZZZ_config_groups.md",permalink:"/docs/next/tutorials/structured_config/__config_groups",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/tutorials/structured_config/ZZZ_config_groups.md",version:"next",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1594603943},s=[],p={rightToc:s};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Structured Configs support config groups which are similar to file-based config groups.\nThe config options in config groups can be used as building blocks when composing the output config object.\nOne difference is that Structured Configs introduce runtime type safety which ensures that the resulting config object\nadheres to the declared types."),Object(i.b)("p",null,"This example adds ",Object(i.b)("inlineCode",{parentName:"p"},"mysql")," and ",Object(i.b)("inlineCode",{parentName:"p"},"postgresql")," configs into the Config Group ",Object(i.b)("inlineCode",{parentName:"p"},"db"),".\nLike with config files, the configs in the ",Object(i.b)("inlineCode",{parentName:"p"},"ConfigStore")," acts as building blocks to be used when composing the\noutput config object."),Object(i.b)("p",null,"The type of variable ",Object(i.b)("inlineCode",{parentName:"p"},"db")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"Config")," is ",Object(i.b)("inlineCode",{parentName:"p"},"Any"),". This allows both ",Object(i.b)("inlineCode",{parentName:"p"},"MySQLConfig")," and ",Object(i.b)("inlineCode",{parentName:"p"},"PostGreSQLConfig"),"\nto be merged into it despite them not having a common superclass."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),'@dataclass\nclass MySQLConfig:\n    driver: str = "mysql"\n    host: str = "localhost"\n    port: int = 3306\n\n@dataclass\nclass PostGreSQLConfig:\n    driver: str = "postgresql"\n    host: str = "localhost"\n    port: int = 5432\n    timeout: int = 10\n\n# Config is extending DictConfig to allow type safe access to the pretty() function below\n@dataclass\nclass Config(DictConfig):\n    db: Any = MISSING\n\ncs = ConfigStore.instance()\ncs.store(name="config", node=Config)\ncs.store(group="db", name="mysql", node=MySQLConfig)\ncs.store(group="db", name="postgresql", node=PostGreSQLConfig)\n\n@hydra.main(config_name="config")\ndef my_app(cfg: Config) -> None:\n    print(cfg.pretty())\n')),Object(i.b)("p",null,"You can select the database from the command line:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"$ python my_app.py +db=postgresql\ndb:\n  driver: postgresql\n  host: localhost\n  password: drowssap\n  port: 5432\n  timeout: 10\n  user: postgre_user\n")),Object(i.b)("h4",{id:"config-inheritance"},"Config inheritance"),Object(i.b)("p",null,"We can improve on the above example by modeling the configuration with inheritance.\nNoteworthy things in the example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We can move fields to the top level class, reducing repetition of field names, type and default values."),Object(i.b)("li",{parentName:"ul"},"The type of the ",Object(i.b)("inlineCode",{parentName:"li"},"db")," field in ",Object(i.b)("inlineCode",{parentName:"li"},"Config")," is ",Object(i.b)("inlineCode",{parentName:"li"},"DBConfig"),". This ensures that only subclasses of ",Object(i.b)("inlineCode",{parentName:"li"},"DBConfig"),"\ncan be merged into db."),Object(i.b)("li",{parentName:"ul"},"We can use OmegaConf.get_type() to obtain the underlying type, and cast() to coerce the type checker to accept it.")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),'@dataclass\nclass DBConfig:\n    host: str = "localhost"\n    port: int = MISSING\n    driver: str = MISSING\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver = "mysql"\n    port = 3306\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver = "postgresql"\n    port = 5432\n    timeout: int = 10\n\n@dataclass\nclass Config(DictConfig):\n    db: DBConfig = MISSING\n\ncs = ConfigStore.instance()\ncs.store(name="config", node=Config)\ncs.store(group="db", name="mysql", node=MySQLConfig)\ncs.store(group="db", name="postgresql", node=PostGreSQLConfig)\n\ndef connect_mysql(cfg: MySQLConfig) -> None:\n    print(f"Connecting to MySQL: {cfg.host}:{cfg.port}")\n\ndef connect_postgresql(cfg: PostGreSQLConfig) -> None:\n    print(f"Connecting to PostGreSQL: {cfg.host}:{cfg.port} (timeout={cfg.timeout})")\n\n@hydra.main(config_name="config")\ndef my_app(cfg: Config) -> None:\n    # Remember that the actual type of Config and db inside it is DictConfig.\n    # If you need to get the underlying type of a config object use OmegaConf.get_type:\n    if OmegaConf.get_type(cfg.db) is MySQLConfig:\n        connect_mysql(cast(MySQLConfig, cfg.db))\n    elif OmegaConf.get_type(cfg.db) is PostGreSQLConfig:\n        connect_postgresql(cast(PostGreSQLConfig, cfg.db))\n    else:\n        raise ValueError()\n')),Object(i.b)("p",null,"Example output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"$ python my_app_with_inheritance.py +db=postgresql\nConnecting to PostGreSQL: localhost:5432 (timeout=10)\n")))}l.isMDXComponent=!0},168:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return d}));var o=t(0),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),l=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},f=function(e){var n=l(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(t),u=o,d=f["".concat(a,".").concat(u)]||f[u]||g[u]||i;return t?r.a.createElement(d,c(c({ref:n},p),{},{components:t})):r.a.createElement(d,c({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);