(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return l}));var r=t(1),o=t(9),s=(t(0),t(199)),a={id:"config_groups",title:"Config groups"},i={id:"tutorials/structured_config/config_groups",title:"Config groups",description:"This example adds `mysql` and `postgresql` configs into the config group `db`.",source:"@site/docs/tutorials/structured_config/4_config_groups.md",permalink:"/docs/next/tutorials/structured_config/config_groups",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/tutorials/structured_config/4_config_groups.md",version:"next",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1582769391,sidebar:"Docs",previous:{title:"Nesting configs",permalink:"/docs/next/tutorials/structured_config/nesting"},next:{title:"Defaults",permalink:"/docs/next/tutorials/structured_config/defaults"}},c=[],p={rightToc:c};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This example adds ",Object(s.b)("inlineCode",{parentName:"p"},"mysql")," and ",Object(s.b)("inlineCode",{parentName:"p"},"postgresql")," configs into the config group ",Object(s.b)("inlineCode",{parentName:"p"},"db"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'@dataclass\nclass MySQLConfig:\n    driver: str = "mysql"\n    host: str = "localhost"\n    port: int = 3306\n    user: str = "omry"\n    password: str = "secret"\n\n@dataclass\nclass PostGreSQLConfig:\n    driver: str = "postgresql"\n    host: str = "localhost"\n    port: int = 5432\n    timeout: int = 10\n    user: str = "postgre_user"\n    password: str = "drowssap"\n\n# Config is extending DictConfig to allow type safe access to the pretty() function below.\n@dataclass\nclass Config(DictConfig):\n    db: Any = MISSING\n\ncs = ConfigStore.instance()\ncs.store(group="db", name="mysql", path="db", node=MySQLConfig)\ncs.store(group="db", name="postgresql", path="db", node=PostGreSQLConfig)\ncs.store(name="config", node=Config)\n\n\n@hydra.main(config_name="config")\ndef my_app(cfg: Config) -> None:\n    print(cfg.pretty())\n\n\nif __name__ == "__main__":\n    my_app()\n\n')),Object(s.b)("p",null,"When running this, you can now select which config group to use from the command line:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"$ python my_app.py db=mysql\ndb:\n  driver: mysql\n  host: localhost\n  password: secret\n  port: 3306\n  user: omry\n")),Object(s.b)("h4",{id:"config-inheritance"},"Config inheritance"),Object(s.b)("p",null,"You can also model your configuration classes using inheritance, reducing the duplication between ",Object(s.b)("inlineCode",{parentName:"p"},"mysql")," and ",Object(s.b)("inlineCode",{parentName:"p"},"postgresql"),",\nand also establishing a common interface between the two configs."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = "localhost"\n    port: int = MISSING\n    user: str = MISSING\n    password: str = MISSING\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = "mysql"\n    port: int = 3306\n    user: str = "omry"\n    password: str = "secret"\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = "postgresql"\n    port: int = 5432\n    timeout: int = 10\n    user: str = "postgre_user"\n    password: str = "drowssap"\n')))}l.isMDXComponent=!0},199:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return g}));var r=t(0),o=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),l=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},u=function(e){var n=l(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,g=u["".concat(a,".").concat(f)]||u[f]||d[f]||s;return t?o.a.createElement(g,i({ref:n},p,{components:t})):o.a.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<s;p++)a[p]=t[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);