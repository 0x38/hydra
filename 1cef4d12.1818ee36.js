(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{130:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"rightToc",(function(){return s})),t.d(n,"metadata",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(1),o=t(9),i=(t(0),t(159)),r={id:"composition",title:"Config composition",sidebar_label:"Config composition"},s=[],l={id:"tutorial/composition",title:"Config composition",description:"The product manager had an idea:",source:"@site/docs/tutorial/5_composition.md",permalink:"/docs/tutorial/composition",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/tutorial/5_composition.md",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1570385071,sidebar_label:"Config composition",sidebar:"Docs",previous:{title:"Defaults",permalink:"/docs/tutorial/defaults"},next:{title:"Multi-run",permalink:"/docs/tutorial/multi-run"}},c={rightToc:s,metadata:l},p="wrapper";function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)(p,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The product manager had an idea:\nShe wants my_app to support creating arbitrary database schemas, on all supported databases!\nShe also wants to have two kinds of UI - a full UI to create and view databases and a view only UI.\nYou are the fall guy. Before you even start, she tells you there are already 3 database schema you need to support, and more are coming soon.\nYou are already sweating because it all sounds pretty complex.\nYou also got a feeling that this is only the beginning - who knows what idea she will have next?"),Object(i.b)("p",null,"To solve it with Hydra, we need more config groups.\nAdd a ",Object(i.b)("inlineCode",{parentName:"p"},"schema")," and a ",Object(i.b)("inlineCode",{parentName:"p"},"ui")," config group:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"\u251c\u2500\u2500 conf\n\u2502\xa0\xa0 \u251c\u2500\u2500 config.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 db\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 mysql.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 postgresql.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 schema\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 school.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 support.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 warehouse.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 ui\n\u2502\xa0\xa0     \u251c\u2500\u2500 full.yaml\n\u2502\xa0\xa0     \u2514\u2500\u2500 view.yaml\n\u2514\u2500\u2500 my_app.py\n")),Object(i.b)("p",null,"At this point, we already have 2 supported databases, 3 schemas, and 2 ui modes.\nThis is a total of 12 combinations. adding another supported database will bring this to 18 combinations.\nCreating 18 files is not a good idea, if you wanted to make a change such as renaming ",Object(i.b)("inlineCode",{parentName:"p"},"db.user")," to ",Object(i.b)("inlineCode",{parentName:"p"},"db.username")," you would have to do it 18 times!"),Object(i.b)("p",null,"Composition can come to the rescue."),Object(i.b)("p",null,"Configuration file: ",Object(i.b)("inlineCode",{parentName:"p"},"config.yaml")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n  - db: mysql\n  - ui: full\n  - schema: school\n")),Object(i.b)("p",null,"The defaults are ordered:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If there are two configurations that defines the same value, the second one would win. "),Object(i.b)("li",{parentName:"ul"},"If two configurations are contributing to the same dictionary the result would be the combined dictionary.")),Object(i.b)("p",null,"When running this, we will compose a configuration with ",Object(i.b)("inlineCode",{parentName:"p"},"mysql"),", ",Object(i.b)("inlineCode",{parentName:"p"},"full")," ui and the ",Object(i.b)("inlineCode",{parentName:"p"},"school")," database schema (which we are seeing for the first time here):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"$ python my_app.py\ndb:\n  driver: mysql\n  pass: secret\n  user: omry\nschema:\n  database: school\n  tables:\n  - fields:\n    - name: string\n    - class: int\n    name: students\n  - fields:\n    - profession: string\n    - time: data\n    - class: int\n    name: exams\nui:\n  windows:\n    create_db: true\n    view: true\n")),Object(i.b)("p",null,"In much the same way you can compose any of the other 11 configurations by adding appropriate overrides such as ",Object(i.b)("inlineCode",{parentName:"p"},"db=postgresql"),"."))}u.isMDXComponent=!0},159:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a),i=o.a.createContext({}),r=function(e){var n=o.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},s=function(e){var n=r(e.components);return o.a.createElement(i.Provider,{value:n},e.children)};var l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},p=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),p=r(t),u=a,d=p[s+"."+u]||p[u]||c[u]||i;return t?o.a.createElement(d,Object.assign({},{ref:n},l,{components:t})):o.a.createElement(d,Object.assign({},{ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,r[1]=s;for(var u=2;u<i;u++)r[u]=t[u];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);