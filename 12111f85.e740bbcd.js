(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{239:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),l=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=l.a.createContext({}),d=function(e){var t=l.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=d(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},p=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),b=d(a),p=n,u=b["".concat(o,".").concat(p)]||b[p]||m[p]||i;return a?l.a.createElement(u,s(s({ref:t},c),{},{components:a})):l.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},62:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return d}));var n=a(2),l=a(7),i=(a(0),a(239)),o={id:"defaults_list",title:"The Defaults List"},s={unversionedId:"advanced/defaults_list",id:"advanced/defaults_list",isDocsHomePage:!1,title:"The Defaults List",description:"Introduction",source:"@site/docs/advanced/defaults_list.md",slug:"/advanced/defaults_list",permalink:"/docs/next/advanced/defaults_list",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/advanced/defaults_list.md",version:"current",lastUpdatedBy:"Jieru Hu",lastUpdatedAt:1605760504,sidebar:"docs",previous:{title:"extended",permalink:"/docs/next/advanced/override_grammar/extended"},next:{title:"Overriding packages",permalink:"/docs/next/advanced/overriding_packages"}},r=[{value:"Introduction",id:"introduction",children:[]},{value:"Defaults list resolution",id:"defaults-list-resolution",children:[]},{value:"Composition order and <code>_self_</code>",id:"composition-order-and-_self_",children:[]},{value:"Interpolation",id:"interpolation",children:[]},{value:"Renaming packages",id:"renaming-packages",children:[]},{value:"Deleting from the defaults list",id:"deleting-from-the-defaults-list",children:[]},{value:"Config &quot;Inheritance&quot; via composition",id:"config-inheritance-via-composition",children:[]}],c={rightToc:r};function d(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Many of the features described in this page are new to Hydra 1.1 and are considered experimental.\nPlease report any issues."))),Object(i.b)("p",null,"A Defaults List determines how to build a config object from other configs, and in what order.\nEach config can have a Defaults List as a top level element. The Defaults List itself is not a part of resulting config."),Object(i.b)("p",null,"The most common items in the Default List are Config Group Defaults, which determines which config group option\nto use from a particular config group."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n - db: mysql # use mysql as the choice for the db config group\n")),Object(i.b)("p",null,"Sometimes a config file should be loaded unconditionally. Such configs can be specified as a string in the\nDefaults List:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n  - db/mysql  # use db/mysql.yaml unconditionally\n")),Object(i.b)("p",null,"Config files loaded this way are not a part of a config group and will always be loaded.\nThey cannot be overridden. In general it is recommended to use the first form (config group default) when possible."),Object(i.b)("h2",{id:"defaults-list-resolution"},"Defaults list resolution"),Object(i.b)("p",null,"When composing the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/terminology#output-config-object"}),"Output Config Object"),", Hydra will first create the final Defaults List and will then compose the\nconfig with it."),Object(i.b)("p",null,"Creating the final defaults list is a complex process: Configs mentioned in the list may have\ntheir own defaults list, sometimes defining the same config groups!"),Object(i.b)("p",null,"The behavior that process is implementing can be described by two simple rules:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The last appearance of a config group determines the final value for that group"),Object(i.b)("li",{parentName:"ol"},"First appearance of a config group determines the composition order for that group")),Object(i.b)("p",null,"The first rule allows you to always override a config group selection that was made earlier.\nThe second rules ensures that composition order is respected."),Object(i.b)("h2",{id:"composition-order-and-_self_"},"Composition order and ",Object(i.b)("inlineCode",{parentName:"h2"},"_self_")),Object(i.b)("p",null,"A config can contain both a Defaults List and config nodes."),Object(i.b)("p",null,"The special element ",Object(i.b)("inlineCode",{parentName:"p"},"_self_")," can be added to determine the composition order of this config relative to the items\nin the defaults list."),Object(i.b)("p",null,"If ",Object(i.b)("inlineCode",{parentName:"p"},"_self_")," is not specified, it is implicitly inserted at the top of the defaults list.\nThis means that by default, elements in the defaults list are composed ",Object(i.b)("strong",{parentName:"p"},"after")," the config declaring the Defaults List."),Object(i.b)("div",{className:"row"},Object(i.b)("div",{className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Input without _self_"',title:'"Input',without:!0,'_self_"':!0}),"defaults:\n - foo: bar\n\n"))),Object(i.b)("div",{className:"col  col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Is equivalent to"',title:'"Is',equivalent:!0,'to"':!0}),"defaults:\n - _self_\n - foo: bar\n")))),Object(i.b)("p",null,"An example with two config files:"),Object(i.b)("div",{className:"row"},Object(i.b)("div",{className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="config.yaml"',title:'"config.yaml"'}),"defaults:\n - _self_\n - db: mysql\n"))),Object(i.b)("div",{className:"col  col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="db/mysql.yaml"',title:'"db/mysql.yaml"'}),"defaults:\n - mysql/engine: innodb\n - _self_\n")))),Object(i.b)("p",null,"When composing ",Object(i.b)("inlineCode",{parentName:"p"},"config.yaml"),", the resulting defaults list will be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n - config              # per defaults list in config.yaml, it comes first (_self_)\n - mysql/engine/innodb # first per defaults list in db/mysql  \n - db/mysql            # second per defaults list in db/mysql (_self_)\n")),Object(i.b)("p",null,"The last two items are added as a result of the expansion of ",Object(i.b)("inlineCode",{parentName:"p"},"db/mysql.yaml"),"."),Object(i.b)("h2",{id:"interpolation"},"Interpolation"),Object(i.b)("p",null,"The Defaults List supports a limited form of interpolation that differs from the normal interpolation in several aspects."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The Defaults List is resolved before the config is computed, so it cannot refer to nodes from the computed config."),Object(i.b)("li",{parentName:"ul"},"The defaults list can interpolate with config groups directly")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n - dataset: imagenet\n - model: alexnet\n - dataset_model: ${dataset}_{model} # will become imagenet_alexnet\n   optional: true                    # do not fail if this config is not found\n")),Object(i.b)("p",null,"See ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/patterns/specializing_config"}),"Specializing Configs")," for a more detailed explanation of this example."),Object(i.b)("h2",{id:"renaming-packages"},"Renaming packages"),Object(i.b)("p",null,"Packages of previously defined config groups can be overridden by later items in the Defaults List.\nThe syntax is similar to that described in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/advanced/override_grammar/basic#modifying-the-defaults-list"}),"Basic Override syntax"),","),Object(i.b)("div",{className:"row"},Object(i.b)("div",{className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Moving to package src"',title:'"Moving',to:!0,package:!0,'src"':!0}),"defaults:\n  - db: mysql\n  - 'db@:src': _keep_\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Renaming package from src to dst"',title:'"Renaming',package:!0,from:!0,src:!0,to:!0,'dst"':!0}),"defaults:\n  - db@src: mysql\n  - 'db@src:dst': _keep_\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Renaming package and changing choice"',title:'"Renaming',package:!0,and:!0,changing:!0,'choice"':!0}),"defaults:\n  - db: mysql\n  - 'db@:src': postgresql\n"))),Object(i.b)("div",{className:"col  col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Result"',title:'"Result"'}),"defaults:\n  - db@src: mysql\n\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Result"',title:'"Result"'}),"defaults:\n  - db@dst: mysql\n\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Result"',title:'"Result"'}),"defaults:\n  - db@dst: postgresql\n\n")))),Object(i.b)("h2",{id:"deleting-from-the-defaults-list"},"Deleting from the defaults list"),Object(i.b)("p",null,"Previously defined config groups can be deleted by later items in the Defaults List.\nThe syntax is similar to that described in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/advanced/override_grammar/basic#modifying-the-defaults-list"}),"Basic Override syntax"),","),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n - db: mysql\n - ~db # will delete `db` from the list regardless of the choice\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"defaults:\n - db: mysql\n - ~db: mysql # will delete db from the list if the selected value is mysql\n")),Object(i.b)("h2",{id:"config-inheritance-via-composition"},'Config "Inheritance" via composition'),Object(i.b)("p",null,"TODO: should probably not be here"),Object(i.b)("p",null,'A common pattern is to "extend" a base config:'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="agent.yaml"',title:'"agent.yaml"'}),"name: ???\nage: ???\nagency: mi6\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="bond.yaml"',title:'"bond.yaml"'}),"defaults:\n  - agent\n  - _self_\n\nname: Bond, James Bond\nage: 7\n")),Object(i.b)("p",null,"In the above example, ",Object(i.b)("inlineCode",{parentName:"p"},"bond.yaml")," is overriding the name and age in ",Object(i.b)("inlineCode",{parentName:"p"},"base.yaml"),"\nThe resulting config will thus be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"name: Bond, James Bond\nage: 7\nagency: mi6\n")))}d.isMDXComponent=!0}}]);