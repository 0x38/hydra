(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{38:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return o}),t.d(n,"rightToc",function(){return l}),t.d(n,"default",function(){return u});t(0);var a=t(72);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o={id:"contributing",title:"Contributing",sidebar_label:"Contributing"},l=[{value:"Environment setup",id:"environment-setup",children:[]},{value:"Pre commit hooks",id:"pre-commit-hooks",children:[]},{value:"Testing",id:"testing",children:[{value:"With pytest",id:"with-pytest",children:[]},{value:"With nox",id:"with-nox",children:[]}]},{value:"NEWS Entries",id:"news-entries",children:[{value:"Contents of a NEWS entry",id:"contents-of-a-news-entry",children:[]}]}],s={rightToc:l},c="wrapper";function u(e){var n=e.components,t=i(e,["components"]);return Object(a.b)(c,r({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This guide assumes you have forked and checked-out the repository.\nIt is recommended that you install Hydra in a virtual environment like conda or virtualenv."),Object(a.b)("h3",{id:"environment-setup"},"Environment setup"),Object(a.b)("p",null,"Install ",Object(a.b)("a",r({parentName:"p"},{href:"https://docs.conda.io/en/latest/miniconda.html"}),"Miniconda")," and create an empty Conda environment with:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"conda create -n hydra37 python=3.7 -y\n")),Object(a.b)("div",{class:"alert alert--info",role:"alert"},Object(a.b)("strong",null,"NOTE"),": The core Hydra framework supports Python 2.7. You may need to create additional environments for different Python versions if CI detect issues on supported version of Python."),Object(a.b)("p",null,"Activate the environment:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"conda activate hydra37  \n")),Object(a.b)("p",null,"Install Hydra and all the included plugins in development mode with the following command:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"pip install -e .[dev] -e . && find ./plugins/ -name setup.py | xargs dirname | xargs pip install  -e\n")),Object(a.b)("h3",{id:"pre-commit-hooks"},"Pre commit hooks"),Object(a.b)("p",null,"It is highly recommended that you install pre commit hooks into your local git repository."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"pre-commit install \n")),Object(a.b)("p",null,"Pre commit hooks can help you catch problems before you push your pull request."),Object(a.b)("h4",{id:"hooks"},"Hooks"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"black : automatic code formatting for Python"),Object(a.b)("li",{parentName:"ul"},"flake8: pep8 compliance checker for Python, this includes copyright header verification.\nany PR that does not pass black and flake8 will fail the automated testing.")),Object(a.b)("h2",{id:"testing"},"Testing"),Object(a.b)("p",null,"There are two ways to run the tests:"),Object(a.b)("h3",{id:"with-pytest"},"With pytest"),Object(a.b)("p",null,"use ",Object(a.b)("inlineCode",{parentName:"p"},"pytest")," at the repository root to run all the Hydra core tests.\nTo run the tests of individual plugins, use ",Object(a.b)("inlineCode",{parentName:"p"},"pytest plugins/NAME"),"."),Object(a.b)("div",{class:"alert alert--info",role:"alert"},Object(a.b)("strong",null,"NOTE"),": Some plugins supports fewer versions of Python than the Hydra core."),Object(a.b)("h3",{id:"with-nox"},"With nox"),Object(a.b)("p",null,"Nox is a test automation tool that is used by the CI to test Hydra under multiple Python versions with a single command."),Object(a.b)("p",null,"To trigger a full nox run, just run ",Object(a.b)("inlineCode",{parentName:"p"},"nox"),"."),Object(a.b)("p",null,"You may want to run specific nox sessions as well to speed things up.\n",Object(a.b)("inlineCode",{parentName:"p"},"nox -l")," will list all available sessions.\nYou can use ",Object(a.b)("inlineCode",{parentName:"p"},"nox -s NAME")," to run a specific session."),Object(a.b)("p",null,"For example:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"nox -s test_core")," will test Hydra core on all supported Python versions"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"nox -s lint")," will lint the code in both Python 2 and Python 3."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"nox -s coverage")," will run the code coverage tool")),Object(a.b)("h2",{id:"news-entries"},"NEWS Entries"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"NEWS.rst")," file is managed using ",Object(a.b)("inlineCode",{parentName:"p"},"towncrier")," and all non trivial changes\nmust be accompanied by a news entry."),Object(a.b)("p",null,"To add an entry to the news file, first you need to have created an issue\ndescribing the change you want to make. A Pull Request itself ",Object(a.b)("em",{parentName:"p"},"may")," function as\nsuch, but it is preferred to have a dedicated issue (for example, in case the\nPR ends up rejected due to code quality reasons)."),Object(a.b)("p",null,"Once you have an issue or pull request, you take the number and you create a\nfile inside of the ",Object(a.b)("inlineCode",{parentName:"p"},"news/")," directory named after that issue number with an\nextension of ",Object(a.b)("inlineCode",{parentName:"p"},"removal"),", ",Object(a.b)("inlineCode",{parentName:"p"},"feature"),", ",Object(a.b)("inlineCode",{parentName:"p"},"bugfix"),", ",Object(a.b)("inlineCode",{parentName:"p"},"docs")," or ",Object(a.b)("inlineCode",{parentName:"p"},"plugin"),". Thus if your\nissue or PR number is ",Object(a.b)("inlineCode",{parentName:"p"},"1234")," and this change is fixing a bug, then you would\ncreate a file ",Object(a.b)("inlineCode",{parentName:"p"},"news/1234.bugfix"),". PRs can span multiple categories by creating\nmultiple files (for instance, if you added a feature and deprecated/removed the\nold feature at the same time, you would create ",Object(a.b)("inlineCode",{parentName:"p"},"news/NNNN.feature")," and\n",Object(a.b)("inlineCode",{parentName:"p"},"news/NNNN.removal"),"). Likewise if a PR touches multiple issues/PRs you may\ncreate a file for each of them with the exact same contents and Towncrier will\ndeduplicate them."),Object(a.b)("h3",{id:"contents-of-a-news-entry"},"Contents of a NEWS entry"),Object(a.b)("p",null,"The contents of this file are reStructuredText formatted text that will be used\nas the content of the news file entry. You do not need to reference the issue\nor PR numbers here as towncrier will automatically add a reference to all of\nthe affected issues when rendering the news file."),Object(a.b)("p",null,"In order to maintain a consistent style in the ",Object(a.b)("inlineCode",{parentName:"p"},"NEWS.rst"),' file, it is\npreferred to keep the news entry to the point, in sentence case, shorter than\n80 characters and in an imperative tone -- an entry should complete the sentence\n"This change will ...". In rare cases, where one line is not enough, use a\nsummary line in an imperative tone followed by a blank line separating it\nfrom a description of the feature/change in one or more paragraphs, each wrapped\nat 80 characters. Remember that a news entry is meant for end users and should\nonly contain details relevant to an end user.'),Object(a.b)("h4",{id:"uninstalling"},"Uninstalling"),Object(a.b)("p",null,"You can uninstall Hydra and all the included plugins from your environment with:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"pip uninstall -y hydra && find ./plugins/ -name setup.py |\\\nxargs -i python {}  --name | xargs pip uninstall  -y\n")))}u.isMDXComponent=!0},72:function(e,n,t){"use strict";t.d(n,"a",function(){return l}),t.d(n,"b",function(){return p});var a=t(0),r=t.n(a),i=r.a.createContext({}),o=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=o(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=function(e){var n=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,l=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),s=o(n),u=t,p=s[i+"."+u]||s[u]||c[u]||a;return n?r.a.createElement(p,Object.assign({},l,{components:n})):r.a.createElement(p,l)};function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);