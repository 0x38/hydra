(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return o}),t.d(n,"rightToc",function(){return c}),t.d(n,"default",function(){return m});t(0);var a=t(78);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o={id:"config_splitting",title:"Splitting a configuration file",sidebar_label:"Splitting a configuration file"},c=[],l={rightToc:c},p="wrapper";function m(e){var n=e.components,t=i(e,["components"]);return Object(a.b)(p,r({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"As your configuration becomes more complex, you may want to split it into multiple files instead of adding to an ever\ngrowing ",Object(a.b)("inlineCode",{parentName:"p"},"config.yaml")," file."),Object(a.b)("p",null,"First config file: ",Object(a.b)("inlineCode",{parentName:"p"},"imagenet.yaml"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"dataset:\n  name: imagenet\n  path: /datasets/imagenet\n")),Object(a.b)("p",null,"Second config file: ",Object(a.b)("inlineCode",{parentName:"p"},"nesterov.yaml"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"optimizer:\n  type: nesterov\n  lr: 0.001\n")),Object(a.b)("p",null,"To reduce the number of configuration files scattered in your code directory, you can put them all inside a ",Object(a.b)("inlineCode",{parentName:"p"},"conf")," subdirectory."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-text"}),"$ tree config_splitting/\nconfig_splitting/\n├── conf\n│   ├── config.yaml\n│   ├── imagenet.yaml\n│   └── nesterov.yaml\n├── README.md\n└── experiment.py\n")),Object(a.b)("p",null,"For simplicity, we still want our code to operate on a single configuration object.\nAdd a ",Object(a.b)("inlineCode",{parentName:"p"},"defaults")," block to the primary config file; config files mentioned there will be loaded and merged automatically.\n",Object(a.b)("inlineCode",{parentName:"p"},"config.yaml"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"defaults:\n  - imagenet\n  - nesterov\n")),Object(a.b)("p",null,"This functionality is similar to an ",Object(a.b)("a",r({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Include_directive"}),"include directive"),",\nbut it's actually quite different: The configs are merged into a single object using\n",Object(a.b)("a",r({parentName:"p"},{href:"https://omegaconf.readthedocs.io/en/latest/usage.html#merging-configurations"}),"OmegaConf merge"),". "),Object(a.b)("p",null,"As before, we just tell Hydra what is the name of the main config (except it's now ",Object(a.b)("inlineCode",{parentName:"p"},"conf/config.yaml"),")"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"import hydra\n\n\n@hydra.main(config_path='conf/config.yaml')\ndef experiment(cfg):\n    print(cfg.pretty())\n\n\nif __name__ == \"__main__\":\n    experiment()\n")),Object(a.b)("p",null,"Running the app, we get a single config object that combines the input configuration files:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"$ python experiment.py\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\noptimizer:\n  lr: 0.001\n  type: nesterov\n")),Object(a.b)("p",null,"Check the ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/facebookresearch/hydra/tree/master/demos/4_config_splitting"}),"runnable example"),"."))}m.isMDXComponent=!0},78:function(e,n,t){"use strict";t.d(n,"a",function(){return c}),t.d(n,"b",function(){return u});var a=t(0),r=t.n(a),i=r.a.createContext({}),o=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=o(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=function(e){var n=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,c=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),l=o(n),m=t,u=l[i+"."+m]||l[m]||p[m]||a;return n?r.a.createElement(u,Object.assign({},c,{components:n})):r.a.createElement(u,c)};function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);