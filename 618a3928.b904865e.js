(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{177:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(2),i=t(10),l=(t(0),t(247)),r={id:"command_line_syntax",title:"Command-line syntax"},o={id:"advanced/command_line_syntax",isDocsHomePage:!1,title:"Command-line syntax",description:"You can modify your configuration via the command line. This includes:",source:"@site/docs/advanced/command_line_syntax.md",permalink:"/docs/next/advanced/command_line_syntax",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/advanced/command_line_syntax.md",version:"next",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1595368379,sidebar:"docs",previous:{title:"Overriding packages",permalink:"/docs/next/advanced/overriding_packages"},next:{title:"Config Search Path",permalink:"/docs/next/advanced/search_path"},latestVersionMainDocPermalink:"/docs/intro"},c=[{value:"Basic examples",id:"basic-examples",children:[{value:"Modifying the Config Object",id:"modifying-the-config-object",children:[]},{value:"Modifying the Defaults List",id:"modifying-the-defaults-list",children:[]}]},{value:"Grammar",id:"grammar",children:[]},{value:"Description",id:"description",children:[{value:"Key",id:"key",children:[]},{value:"Quoted values",id:"quoted-values",children:[]},{value:"Primitives",id:"primitives",children:[]},{value:"Lists",id:"lists",children:[]},{value:"Dictionaries",id:"dictionaries",children:[]},{value:"Sweeper syntax",id:"sweeper-syntax",children:[]}]},{value:"Working with your shell",id:"working-with-your-shell",children:[{value:"Bash",id:"bash",children:[]},{value:"Other shells",id:"other-shells",children:[]}]}],b={rightToc:c};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"You can modify your configuration via the command line. This includes:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Modifying the the ",Object(l.b)("inlineCode",{parentName:"li"},"Defaults List")),Object(l.b)("li",{parentName:"ul"},"Modifying the config object")),Object(l.b)("p",null,"Command line overrides matching a Config group are modifying the ",Object(l.b)("inlineCode",{parentName:"p"},"Defaults List"),";\nThe rest are manipulating the config object."),Object(l.b)("h2",{id:"basic-examples"},"Basic examples"),Object(l.b)("h3",{id:"modifying-the-config-object"},"Modifying the Config Object"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Overriding a config value : ",Object(l.b)("inlineCode",{parentName:"li"},"foo.bar=value")),Object(l.b)("li",{parentName:"ul"},"Appending a config value : ",Object(l.b)("inlineCode",{parentName:"li"},"+foo.bar=value")),Object(l.b)("li",{parentName:"ul"},"Removing a config value : ",Object(l.b)("inlineCode",{parentName:"li"},"~foo.bar"),", ",Object(l.b)("inlineCode",{parentName:"li"},"~foo.bar=value"))),Object(l.b)("h3",{id:"modifying-the-defaults-list"},"Modifying the Defaults List"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Overriding selected Option: ",Object(l.b)("inlineCode",{parentName:"li"},"db=mysql")),Object(l.b)("li",{parentName:"ul"},"Changing a package: ",Object(l.b)("inlineCode",{parentName:"li"},"db@src_pkg:dst_pkg")),Object(l.b)("li",{parentName:"ul"},"Overriding selected Option and changing the package: ",Object(l.b)("inlineCode",{parentName:"li"},"db@src_pkg:dst_pkg=mysql")),Object(l.b)("li",{parentName:"ul"},"Appending to defaults: ",Object(l.b)("inlineCode",{parentName:"li"},"+db=mysql")),Object(l.b)("li",{parentName:"ul"},"Deleting from defaults: ",Object(l.b)("inlineCode",{parentName:"li"},"~db"),", ",Object(l.b)("inlineCode",{parentName:"li"},"~db=mysql"))),Object(l.b)("h2",{id:"grammar"},"Grammar"),Object(l.b)("p",null,"Hydra supports a rich ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Domain-specific_language"}),"DSL")," in the command line.",Object(l.b)("br",{parentName:"p"}),"\n","Below are the lexical rules, and ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#Description"}),"description")," of the grammar.\nYou can see the full grammar ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebookresearch/hydra/tree/master/hydra/grammar/Override.g4"}),"here"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-antlr4"}),"grammar Override;\n\noverride: (\n      key '=' value?                             // key=value\n    | '~' key ('=' value?)?                      // ~key | ~key=value\n    | '+' key '=' value?                         // +key= | +key=value\n) EOF;\n\nkey :\n    packageOrGroup                              // key\n    | packageOrGroup '@' package (':' package)? // group@pkg | group@pkg1:pkg2\n    | packageOrGroup '@:' package               // group@:pkg2\n;\n\npackageOrGroup: package | ID ('/' ID)+;         // db, hydra/launcher\npackage: (ID | DOT_PATH);                       // db, hydra.launcher\n\nvalue: element | choiceSweep;\nelement:\n      primitive\n    | listValue\n    | dictValue\n;\nchoiceSweep: element (',' element)+;            // value1,value2,value3\n\nprimitive:\n    WS? (QUOTED_VALUE |                         // 'hello world', \"hello world\"\n        ( ID                                    // foo_10\n        | NULL                                  // null, NULL\n        | INT                                   // 0, 10, -20, 1_000_000\n        | FLOAT                                 // 3.14, -20.0, 1e-1, -10e3\n        | BOOL                                  // true, TrUe, false, False\n        | DOT_PATH                              // foo.bar\n        | INTERPOLATION                         // ${foo.bar}, ${env:USER,me}\n        | '/' | ':' | '-' | '\\\\'\n        | '+' | '.' | '$'\n        )+\n    )\n    WS?;\n\nlistValue: '[' (element(',' element)*)? ']';    // [], [1,2,3], [a,b,[1,2]]\ndictValue: '{'                                  // {}, {a:10,b:20}\n    (id_ws ':' element (',' id_ws ':' element)*)?\n'}';\n\nid_ws: WS? ID WS?;\n")),Object(l.b)("h2",{id:"description"},"Description"),Object(l.b)("h3",{id:"key"},"Key"),Object(l.b)("p",null,"Key is the component before the =. A few examples:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"foo.bar           # A config key\nhydra/launcher    # A config group\ngroup@pkg         # A config group assigned to the package pkg\ngroup@pkg1:pkg2   # A config group changing the package from pkg1 to pkg2\n")),Object(l.b)("h3",{id:"quoted-values"},"Quoted values"),Object(l.b)("p",null,"Hydra supports both double quotes and single quoted values.\nQuoted strings can accept any value between the quotes.\nTo include a single quote in a single quoted string escape it : ",Object(l.b)("inlineCode",{parentName:"p"},"\\'"),". Same for double quote in a double quoted string."),Object(l.b)("div",{className:"row"},Object(l.b)("div",{className:"col col--6"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python",metastring:'title="Double quotes"',title:'"Double','quotes"':!0}),'"hello there"\n"escaped \\"double quote\\""\n"1,2,3"\n"{a:10} ${xyz}"\n"\'single quoted string\'"\n'))),Object(l.b)("div",{className:"col  col--6"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python",metastring:'title="Single quotes"',title:'"Single','quotes"':!0}),"'hello there'\n'escaped \\'single quote\\''\n'1,2,3'\n'{a:10} ${xyz}'\n'\"double quoted string\"'\n")))),Object(l.b)("h3",{id:"primitives"},"Primitives"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"id")," : oompa10, loompa_12"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"null"),": null"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"int"),": 10, -20, 0, 1_000_000."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"float"),": 3.14, -10e6, inf, -inf, nan."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"bool"),": true, false"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"dot_path"),": foo.bar"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"interpolation"),": ${foo.bar}, ${env:USER,me}")),Object(l.b)("p",null,"Constants (null, true, false, inf, nan) are case insensitive. "),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"IMPORTANT")," Always single-quote interpolations in the shell."),Object(l.b)("h3",{id:"lists"},"Lists"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"foo=[1,2,3]\nnested=[a,[b,[c]]]\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"IMPORTANT")," Always single-quote overrides that contains lists in the shell."),Object(l.b)("h3",{id:"dictionaries"},"Dictionaries"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"foo={a:10,b:20}\nnested={a:10,b:{c:30,d:40}}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"IMPORTANT")," Always single-quote overrides that contains dicts in the shell."),Object(l.b)("h3",{id:"sweeper-syntax"},"Sweeper syntax"),Object(l.b)("p",null,"A choice sweep is comma separated list with two or more elements: "),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),'key=a,b                       # Simple sweep: ChoiceSweep(a, b)\nkey="a,b","c,d"               # Elements can be quoted strings, ChoiceSweep("a,b", "c,d")\nkey=[a,b],[c,d]               # Elements can be real lists, ChoiceSweep([a,b], [c,d])\nkey={a:10, b:20},{c:30,d:40}  # and even dictionaries: ChoiceSweep([a,b], [c,d]){a,b}}\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"IMPORTANT")," You may need to quote your choice sweep in the shell"),Object(l.b)("h2",{id:"working-with-your-shell"},"Working with your shell"),Object(l.b)("p",null,"All shells interprets command line inputs and may change what is passed to the process.\nA good way to determine what the shell is doing to your command is to ",Object(l.b)("inlineCode",{parentName:"p"},"echo")," it."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"# bash output\n$ echo foo_{a:10,b:20} ${HOME} [b,c]*\nfoo_a:10 foo_b:20 /home/omry build_helpers\n$ echo 'foo_{a:10,b:20}' '${HOME}' '[b,c]*'\nfoo_{a:10,b:20} ${HOME} [b,c]*\n")),Object(l.b)("p",null,"If in doubt, quote a command line element with a ",Object(l.b)("strong",{parentName:"p"},"single quote")," (",Object(l.b)("inlineCode",{parentName:"p"},"'"),").  "),Object(l.b)("p",null,"If you want to pass quotes to Hydra in a shell quoted string, it's best to pass double quotes."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),'$ echo \'"hello world"\'\n"hello world"\n')),Object(l.b)("p",null,"You can use some shell specific commands to change their behavior, but the cost will be that their behavior will change."),Object(l.b)("h3",{id:"bash"},"Bash"),Object(l.b)("p",null,"You can disable braces expansion, filename generation (globing) and hist expansion. Please note that this will change\nyour shell behavior for the current session."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"$ set +o braceexpand -o noglob +o histexpand\n$ echo key1={a:10,b:20} key2=${HOME} key=[b]*\nkey1={a:10,b:20} key2=/home/omry key=[b]*\n# does not help with () though:\n$  echo key=choice(a,b,c)\nbash: syntax error near unexpected token '('\n$ echo 'key=choice(a,b,c)'\nkey=choice(a,b,c)\n")),Object(l.b)("h3",{id:"other-shells"},"Other shells"),Object(l.b)("p",null,"Send a PR to add information about your favorite shell here."))}s.isMDXComponent=!0},247:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var b=i.a.createContext({}),s=function(e){var n=i.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.a.createElement(b.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(t),u=a,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||l;return t?i.a.createElement(m,o(o({ref:n},b),{},{components:t})):i.a.createElement(m,o({ref:n},b))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var b=2;b<l;b++)r[b]=t[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);