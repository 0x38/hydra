(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{137:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return d})),t.d(n,"rightToc",(function(){return o})),t.d(n,"metadata",(function(){return p})),t.d(n,"default",(function(){return c}));var a=t(1),r=t(9),i=(t(0),t(160)),d={id:"ray_example",title:"Ray example",sidebar_label:"Ray example"},o=[],p={id:"advanced/ray_example",title:"Ray example",description:"Ray is a framework for building and running distributed applications.",source:"@site/docs/advanced/ray_example.md",permalink:"/docs/advanced/ray_example",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/docs/advanced/ray_example.md",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1575786977,sidebar_label:"Ray example",sidebar:"Docs",previous:{title:"Compose API",permalink:"/docs/advanced/compose_api"},next:{title:"Contributing",permalink:"/docs/development/contributing"}},s={rightToc:o,metadata:p},l="wrapper";function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(l,Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Ray is a framework for building and running distributed applications.\nHydra can be used with Ray to configure Ray itself as well as complex remote calls through the compose API.\nA future plugin will enable launching to Ray clusters directly from the command line."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import hydra\nfrom hydra.experimental import compose\nimport ray\nimport time\n\n\n@ray.remote\ndef train(overrides, cfg):\n    print(cfg.pretty())\n    time.sleep(5)\n    return overrides, 0.9\n\n\n@hydra.main(config_path="conf/config.yaml")\ndef main(cfg):\n    ray.init(**cfg.ray.init)\n\n    results = []\n    for model in ["alexnet", "resnet"]:\n        for dataset in ["cifar10", "imagenet"]:\n            overrides = [f"dataset={dataset}", f"model={model}"]\n            run_cfg = compose(overrides=overrides)\n            ret = train.remote(overrides, run_cfg)\n            results.append(ret)\n\n    for overrides, score in ray.get(results):\n        print(f"Result from {overrides} : {score}")\n\n\nif __name__ == "__main__":\n    main()\n')),Object(i.b)("p",null,"Output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"(pid=11571) dataset:\n(pid=11571)   name: cifar10\n(pid=11571)   path: /datasets/cifar10\n(pid=11571) model:\n(pid=11571)   num_layers: 7\n(pid=11571)   type: alexnet\n(pid=11571) \n(pid=11572) dataset:\n(pid=11572)   name: imagenet\n(pid=11572)   path: /datasets/imagenet\n(pid=11572) model:\n(pid=11572)   num_layers: 7\n(pid=11572)   type: alexnet\n(pid=11572) \n(pid=11573) dataset:\n(pid=11573)   name: cifar10\n(pid=11573)   path: /datasets/cifar10\n(pid=11573) model:\n(pid=11573)   num_layers: 50\n(pid=11573)   type: resnet\n(pid=11573)   width: 10\n(pid=11573) \n(pid=11574) dataset:\n(pid=11574)   name: imagenet\n(pid=11574)   path: /datasets/imagenet\n(pid=11574) model:\n(pid=11574)   num_layers: 50\n(pid=11574)   type: resnet\n(pid=11574)   width: 10\n(pid=11574) \nResult from ['dataset=cifar10', 'model=alexnet'] : 0.9\nResult from ['dataset=imagenet', 'model=alexnet'] : 0.9\nResult from ['dataset=cifar10', 'model=resnet'] : 0.9\nResult from ['dataset=imagenet', 'model=resnet'] : 0.9\n")))}c.isMDXComponent=!0},160:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return c}));var a=t(0),r=t.n(a),i=r.a.createContext({}),d=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},o=function(e){var n=d(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var p="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},l=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),l=d(t),c=a,m=l[o+"."+c]||l[c]||s[c]||i;return t?r.a.createElement(m,Object.assign({},{ref:n},p,{components:t})):r.a.createElement(m,Object.assign({},{ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,d=new Array(i);d[0]=l;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:a,d[1]=o;for(var c=2;c<i;c++)d[c]=t[c];return r.a.createElement.apply(null,d)}return r.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"}}]);