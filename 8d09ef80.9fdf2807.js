(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{186:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(9),o=(t(0),t(230)),i={id:"schema",title:"Structured config schema"},s={id:"tutorials/structured_config/schema",title:"Structured config schema",description:"We have seen how to use Structured Configs as configuration, but they can also be used as a schema validating configuration files!",source:"@site/docs/tutorials/structured_config/5_schema.md",permalink:"/docs/next/tutorials/structured_config/schema",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/tutorials/structured_config/5_schema.md",version:"next",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1589597074,sidebar:"Docs",previous:{title:"Defaults",permalink:"/docs/next/tutorials/structured_config/defaults"},next:{title:"Config Store API",permalink:"/docs/next/tutorials/structured_config/config_store"}},c=[],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"We have seen how to use Structured Configs as configuration, but they can also be used as a schema validating configuration files!\nWhen Hydra loads a configuration, it looks for config with the same name in the ",Object(o.b)("inlineCode",{parentName:"p"},"ConfigStore"),".\nIf found, it is used as the schema for the newly loaded config."),Object(o.b)("p",null,"This is an example of defining and stores one schema for db/mysql and another for db/postgresql."),Object(o.b)("p",null,"Given a config directory structure like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"$ tree conf/\nconf/\n\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 db\n    \u251c\u2500\u2500 mysql.yaml\n    \u2514\u2500\u2500 postgresql.yaml\n")),Object(o.b)("p",null,"The Structurd Configs below are stored as db/mysql and db/postgresql. They will be used as schema\nwhen we load the corresponding config files."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = "localhost"\n    port: int = MISSING\n\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = "mysql"\n    port: int = 3306\n    user: str = MISSING\n    password: str = MISSING\n\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = "postgresql"\n    port: int = 5432\n    user: str = MISSING\n    password: str = MISSING\n    timeout: int = 10\n\n\n# registering db/mysql and db/postgresql schemas.\nss = ConfigStore.instance()\nss.store(group="db", name="mysql", node=MySQLConfig)\nss.store(group="db", name="postgresql", node=PostGreSQLConfig)\n\n\n# config here is config.yaml under the conf directory.\n# config.yaml will compose in db: mysql by default (per the defaults list),\n# and it will be validated against the schema\n@hydra.main(config_path="conf", config_name="config")\ndef my_app(cfg: DictConfig) -> None:\n    ...\n')),Object(o.b)("p",null,"When ",Object(o.b)("inlineCode",{parentName:"p"},"db/mysql.yaml")," and ",Object(o.b)("inlineCode",{parentName:"p"},"db/postgresql.yaml")," are loaded, the corresponding configs from the ",Object(o.b)("inlineCode",{parentName:"p"},"ConfigStore")," are used automatically.\nThis can be used to validate that both the configuration files (",Object(o.b)("inlineCode",{parentName:"p"},"mysql.yaml")," and ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql.yaml"),") and the command line overrides are conforming to the schema. "),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ python my_app.py  db.port=fail\nTraceback (most recent call last):\n..\nomegaconf.errors.ValidationError: Error setting 'db.port = fail' : Value 'fail' could not be converted to Integer\n")))}u.isMDXComponent=!0},230:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,m=d["".concat(i,".").concat(p)]||d[p]||f[p]||o;return t?a.a.createElement(m,s(s({ref:n},l),{},{components:t})):a.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);