(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));n(0);var r=n(86);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i={id:"working_directory",title:"Output/Working directory",sidebar_label:"Output/Working directory"},c=[],p={rightToc:c},l="wrapper";function u(e){var t=e.components,n=a(e,["components"]);return Object(r.b)(l,o({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Hydra solves the problem of your needing to specify a new output directory for each run, by\ncreating a directory for each run and executing your code within that directory."),Object(r.b)("p",null,"The working directory is used to:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Store the output for the application (For example, a database dump file)"),Object(r.b)("li",{parentName:"ul"},"Store the Hydra output for the run (Configuration, Logs etc)")),Object(r.b)("p",null,"Every time you run the app, a new working directory is automatically created:"),Object(r.b)("p",null,"Python file: ",Object(r.b)("inlineCode",{parentName:"p"},"my_app.py")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-python"}),'import os\n\n@hydra.main()\ndef my_app(_cfg):\n    print("Working directory : {}".format(os.getcwd()))\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-17\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-19\n\n')),Object(r.b)("p",null,"Let's take a look at one of those working directories:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-text"}),"$ tree outputs/2019-09-25/15-16-17\noutputs/2019-09-25/15-16-17\n├── .hydra\n│   ├── config.yaml\n│   ├── hydra.yaml\n│   └── overrides.yaml\n└── my_app.log\n")),Object(r.b)("p",null,"We have the Hydra output directory (",Object(r.b)("inlineCode",{parentName:"p"},".hydra")," by default) and the application log file.\nInside the configuration output directory we have:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"config.yaml"),": A dump of the user specified configuration"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"hydra.yaml"),": A dump of the Hydra configuration"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"overrides.yaml"),": The command line overrides used")),Object(r.b)("p",null,"And in the main output directory:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"my_app.log"),": A log file created for this run")),Object(r.b)("p",null,"Working directory can be ",Object(r.b)("a",o({parentName:"p"},{href:"../configure_hydra/workdir/"}),"customized"),"."))}u.isMDXComponent=!0},86:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r),a=o.a.createContext({}),i=function(e){var t=o.a.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=i(e.components);return o.a.createElement(a.Provider,{value:t},e.children)};var p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),u=i(n),d=r,y=u[c+"."+d]||u[d]||l[d]||a;return n?o.a.createElement(y,Object.assign({},{ref:t},p,{components:n})):o.a.createElement(y,Object.assign({},{ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var d=2;d<a;d++)i[d]=n[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);