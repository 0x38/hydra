(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{164:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"default",(function(){return d}));var a=t(1),r=t(9),i=(t(0),t(185)),o={id:"config_file",title:"Configuration file",sidebar_label:"Configuration file"},c=[{value:"Strict mode",id:"strict-mode",children:[]}],l={id:"version-0.11/tutorial/config_file",title:"Configuration file",description:"It can get tedious to type all those command line arguments every time.",source:"@site/versioned_docs/version-0.11/tutorial/2_config_file.md",permalink:"/docs/tutorial/config_file",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/versioned_docs/version-0.11/tutorial/2_config_file.md",version:"0.11",lastUpdatedBy:"Omry Yadan",lastUpdatedAt:1578885213,sidebar_label:"Configuration file",sidebar:"version-0.11/Docs",previous:{title:"Simple command line application",permalink:"/docs/tutorial/simple_cli"},next:{title:"Config groups",permalink:"/docs/tutorial/config_groups"}},p={rightToc:c,metadata:l},s="wrapper";function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(s,Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"It can get tedious to type all those command line arguments every time.\nFix it by creating a configuration file:"),Object(i.b)("p",null,"Configuration file: ",Object(i.b)("inlineCode",{parentName:"p"},"config.yaml")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"db:\n  driver: mysql\n  user: omry\n  pass: secret\n")),Object(i.b)("p",null,"Specify the config file by passing a ",Object(i.b)("inlineCode",{parentName:"p"},"config_path")," parameter to the ",Object(i.b)("inlineCode",{parentName:"p"},"@hydra.main()")," decorator.\nThe location of the ",Object(i.b)("inlineCode",{parentName:"p"},"config_path")," is relative to your Python file."),Object(i.b)("p",null,"Python file: ",Object(i.b)("inlineCode",{parentName:"p"},"my_app.py")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"@hydra.main(config_path='config.yaml')\ndef my_app(cfg):\n    print(cfg.pretty())\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"config.yaml")," is loaded automatically when you run your application"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"$ python my_app.py\ndb:\n  driver: mysql\n  pass: secret\n  user: omry\n")),Object(i.b)("p",null,"You can override values in the loaded config from the command line:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"$ python my_app.py db.user=root db.pass=1234\ndb:\n  driver: mysql\n  user: root\n  pass: 1234\n")),Object(i.b)("h3",{id:"strict-mode"},"Strict mode"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Strict mode")," is useful for catching mistakes in both the command line overrides and in the code early.\nStrict mode is on by default when you specify a configuration file for the ",Object(i.b)("inlineCode",{parentName:"p"},"config_path")," argument in ",Object(i.b)("inlineCode",{parentName:"p"},"@hydra.main")," decorator.\nIt can be turned on or off via the ",Object(i.b)("inlineCode",{parentName:"p"},"strict")," argument in your ",Object(i.b)("inlineCode",{parentName:"p"},"@hydra.main()")," decorator."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"@hydra.main(config_path='config.yaml')\ndef my_app(cfg):\n    driver = cfg.db.driver # Okay\n    user = cfg.db.user # Okay\n    password = cfg.db.password # Not okay, there is no password field in db!\n                               # This will result in a KeyError\n")),Object(i.b)("p",null,"Strict mode will also catch command line override mistakes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"$ python my_app.py db.port=3306\nTraceback (most recent call last):\n...\nKeyError: 'Accessing unknown key in a struct : db.port\n")),Object(i.b)("p",null,"With strict mode off, accessing unknown keys in the config is permitted and both the above override and the example\nbelow would run."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"@hydra.main(config_path='config.yaml', strict=False)\ndef my_app(cfg):\n    cfg.db.port = 3306 # Okay\n")))}d.isMDXComponent=!0},185:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a),i=r.a.createContext({}),o=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=o(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},s=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),s=o(t),d=a,m=s[c+"."+d]||s[d]||p[d]||i;return t?r.a.createElement(m,Object.assign({},{ref:n},l,{components:t})):r.a.createElement(m,Object.assign({},{ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=s;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var d=2;d<i;d++)o[d]=t[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);